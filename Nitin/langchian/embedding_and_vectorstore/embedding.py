# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zC-L7IpWMPPX7NTYsM7wGTwGnl9INtSY
"""

!pip install langchain_google_genai langchain  --upgrade

from langchain_google_genai import GoogleGenerativeAIEmbeddings
import os
from google.colab import userdata


os.environ["GOOGLE_API_KEY"] = userdata.get("GOOGLE_API_KEY")

embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

text1 = "he is a animal lover"
text2 = "aman has a dog as a pet"
text3 = "one piece is real"

vect1 = embeddings.embed_query(text1)
vect2 = embeddings.embed_query(text2)
vect3 = embeddings.embed_query(text3)


similarity_1_2 = cosine_similarity([vect1],[vect2],)
similarity_2_3 = cosine_similarity([vect2],[vect3])

distance_1_2 = np.linalg.norm(np.array(vect1) - np.array(vect2))
distance_2_3 = np.linalg.norm(np.array(vect2) - np.array(vect3))

# direction similarity between the vectors
print(f"similarity 1 and 2 {similarity_1_2}")
print(f"similarity 2 and 3 {similarity_2_3}")


# distance between the vector point
print(f"distance between vector point 1 and 2: {distance_1_2}")
print(f"distsnce between vector point 2 and 3:  {distance_2_3}")

from langchain_core.vectorstores import InMemoryVectorStore

documents = [
    "my cat name is luffy ",
    "cat crosiing the road",
    "the vet name is kunal",
    "kunal eats oats",
    "kunal is a cat",
]
vectorstore = InMemoryVectorStore.from_texts(documents,embedding=embeddings)


query = "what is kunal "

# to se

# all_stored_docs = vectorstore.store
# for index, doc_id in enumerate(all_stored_docs):
#     doc = all_stored_docs[doc_id]
#     print(f"Index: {index}")
#     print(f"Doc ID: {doc_id}")
#     print(f"Content: {doc.keys()}")
#     print(f"{doc['text']}")


query_vector = embeddings.embed_query(query)

response  = vectorstore.similarity_search(query=query,k=5)

response_1_vector = embeddings.embed_query(response[0].page_content)
response_5_vector =embeddings.embed_query(response[4].page_content)


distance_query_1 = np.linalg.norm(np.array([query_vector]) - np.array([response_1_vector]))
distance_query_5 = np.linalg.norm(np.array([query_vector]) - np.array([response_5_vector]))
print(f"{distance_query_1} \n{distance_query_5}")


print(response)